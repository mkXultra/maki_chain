// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: makichain/maki/maki.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Maki struct {
	Id          uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Unit        []types.Coin `protobuf:"bytes,2,rep,name=unit,proto3" json:"unit"`
	ExpiredHour uint64       `protobuf:"varint,3,opt,name=expiredHour,proto3" json:"expiredHour,omitempty"`
	Creator     string       `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Maki) Reset()         { *m = Maki{} }
func (m *Maki) String() string { return proto.CompactTextString(m) }
func (*Maki) ProtoMessage()    {}
func (*Maki) Descriptor() ([]byte, []int) {
	return fileDescriptor_13d31a099d3c7b76, []int{0}
}
func (m *Maki) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Maki) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Maki.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Maki) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Maki.Merge(m, src)
}
func (m *Maki) XXX_Size() int {
	return m.Size()
}
func (m *Maki) XXX_DiscardUnknown() {
	xxx_messageInfo_Maki.DiscardUnknown(m)
}

var xxx_messageInfo_Maki proto.InternalMessageInfo

func (m *Maki) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Maki) GetUnit() []types.Coin {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *Maki) GetExpiredHour() uint64 {
	if m != nil {
		return m.ExpiredHour
	}
	return 0
}

func (m *Maki) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Maki)(nil), "mkxultra.maki_chain.maki.Maki")
}

func init() { proto.RegisterFile("makichain/maki/maki.proto", fileDescriptor_13d31a099d3c7b76) }

var fileDescriptor_13d31a099d3c7b76 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4b, 0xf4, 0x30,
	0x1c, 0xc6, 0x9b, 0x5e, 0x79, 0x5f, 0xcc, 0x81, 0x43, 0x71, 0xc8, 0xdd, 0x10, 0x8b, 0x53, 0x41,
	0x48, 0x38, 0xef, 0x1b, 0x9c, 0x08, 0x2e, 0x2e, 0x9d, 0xc4, 0x45, 0xd2, 0x36, 0xf4, 0xfe, 0xd4,
	0xf6, 0x5f, 0xd2, 0x54, 0xea, 0x27, 0x70, 0xf5, 0x63, 0xdd, 0x78, 0xa3, 0x93, 0x48, 0xfb, 0x45,
	0xa4, 0xa9, 0xa2, 0x4b, 0x78, 0xf2, 0xe4, 0xc7, 0x0f, 0x9e, 0xd0, 0x55, 0xa5, 0x4a, 0xc8, 0xf6,
	0x0a, 0x6a, 0x39, 0x25, 0x77, 0x88, 0xc6, 0xa0, 0xc5, 0x90, 0x55, 0x65, 0xdf, 0x3d, 0x59, 0xa3,
	0xc4, 0x54, 0x3e, 0x3a, 0xc8, 0xc5, 0xf5, 0x59, 0x81, 0x05, 0x3a, 0x48, 0x4e, 0x69, 0xe6, 0xd7,
	0x3c, 0xc3, 0xb6, 0xc2, 0x56, 0xa6, 0xaa, 0xd5, 0xf2, 0x79, 0x93, 0x6a, 0xab, 0x36, 0x32, 0x43,
	0xa8, 0xe7, 0xf7, 0x8b, 0x57, 0x42, 0x83, 0x3b, 0x55, 0x42, 0x78, 0x4a, 0x7d, 0xc8, 0x19, 0x89,
	0x48, 0x1c, 0x24, 0x3e, 0xe4, 0xe1, 0x96, 0x06, 0x5d, 0x0d, 0x96, 0xf9, 0xd1, 0x22, 0x5e, 0x5e,
	0xad, 0xc4, 0xec, 0x11, 0x93, 0x47, 0x7c, 0x7b, 0xc4, 0x35, 0x42, 0xbd, 0x0b, 0x0e, 0x1f, 0xe7,
	0x5e, 0xe2, 0xe0, 0x30, 0xa2, 0x4b, 0xdd, 0x37, 0x60, 0x74, 0x7e, 0x8b, 0x9d, 0x61, 0x0b, 0x67,
	0xfb, 0x5b, 0x85, 0x8c, 0xfe, 0xcf, 0x8c, 0x56, 0x16, 0x0d, 0x0b, 0x22, 0x12, 0x9f, 0x24, 0x3f,
	0xd7, 0xdd, 0xcd, 0x61, 0xe0, 0xe4, 0x38, 0x70, 0xf2, 0x39, 0x70, 0xf2, 0x36, 0x72, 0xef, 0x38,
	0x72, 0xef, 0x7d, 0xe4, 0xde, 0xc3, 0x65, 0x01, 0x76, 0xdf, 0xa5, 0x22, 0xc3, 0x4a, 0x56, 0xe5,
	0xbd, 0x9b, 0x2f, 0x7f, 0xe7, 0xcb, 0x7e, 0xfe, 0x25, 0xfb, 0xd2, 0xe8, 0x36, 0xfd, 0xe7, 0x76,
	0x6d, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xcb, 0x30, 0xb0, 0x44, 0x01, 0x00, 0x00,
}

func (m *Maki) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Maki) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Maki) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMaki(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.ExpiredHour != 0 {
		i = encodeVarintMaki(dAtA, i, uint64(m.ExpiredHour))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Unit) > 0 {
		for iNdEx := len(m.Unit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaki(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintMaki(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMaki(dAtA []byte, offset int, v uint64) int {
	offset -= sovMaki(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Maki) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMaki(uint64(m.Id))
	}
	if len(m.Unit) > 0 {
		for _, e := range m.Unit {
			l = e.Size()
			n += 1 + l + sovMaki(uint64(l))
		}
	}
	if m.ExpiredHour != 0 {
		n += 1 + sovMaki(uint64(m.ExpiredHour))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMaki(uint64(l))
	}
	return n
}

func sovMaki(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMaki(x uint64) (n int) {
	return sovMaki(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Maki) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaki
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Maki: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Maki: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaki
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaki
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unit = append(m.Unit, types.Coin{})
			if err := m.Unit[len(m.Unit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredHour", wireType)
			}
			m.ExpiredHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiredHour |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaki
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaki
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaki
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaki(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMaki
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMaki(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMaki
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaki
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaki
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMaki
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMaki
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMaki
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMaki        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMaki          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMaki = fmt.Errorf("proto: unexpected end of group")
)
