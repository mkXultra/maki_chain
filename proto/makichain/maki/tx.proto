syntax = "proto3";
package mkxultra.maki_chain.maki;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/mkXultra/maki_chain/x/maki/types";

// Msg defines the Msg service.
service Msg {
  rpc MintToken(MsgMintToken) returns (MsgMintTokenResponse);
  rpc Burn(MsgBurnToken) returns (MsgBurnTokenResponse);
  rpc IsBurning(MsgIsBurning) returns (MsgIsBurningResponse);
  rpc Swap(MsgSwap) returns (MsgSwapResponse);
}

message MsgMintToken {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}
message MsgMintTokenResponse {}


message MsgBurnToken {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
}
message MsgBurnTokenResponse {}

message MsgIsBurning {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
}
message MsgIsBurningResponse {}

message MsgSwap {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
}
message MsgSwapResponse {}